AWSTemplateFormatVersion: 2010-09-09
Description: https://venafi-ecosystem.s3.amazonaws.com/tlspk/v1/cfn-tlspk-cluster-bootstrapper.yaml
Parameters:
  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
    Description: Resolves to the latest Amazon Linux AMI from the selected region (DO NOT CHANGE).
  InstanceType:
    Type: String
    Default: m5.large
    AllowedValues:
      - t2.micro
      - m5.large
    Description: Determines available RAM and CPU of each underlying EC2 instance.
  EcosystemBucket:
    Type: String
    Default: venafi-ecosystem
    Description: Indicates how to resolve https://${EcosystemBucket}.s3.amazonaws.com/tlspk/v1/tlspk-helper.sh.
  TLSPKSAUserId:
    Type: String
    AllowedPattern : '.+'
    Description: A TLS Protect For Kubernetes service account User ID as listed at https://platform.jetstack.io/org/ORGANIZATION/manage/service_accounts.
  TLSPKSAUserSecret:
    Type: String
    NoEcho: true
    AllowedPattern : '.+'
    Description: The matching Secret for the provided TLS Protect For Kubernetes service account User ID
  NumberOfInstances:
    Type: Number
    Default: 1
    MinValue: 1
    MaxValue: 10
    Description: Indicates how many EC2 instances are required. NOTE each EC2 hosts a single K8s cluster.
Resources:
  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
  K8sClusterAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Count: !Ref NumberOfInstances
        Timeout: "PT10M"
    Properties:
      AvailabilityZones:
        - !Sub ${AWS::Region}a
        - !Sub ${AWS::Region}b
        - !Sub ${AWS::Region}c
      DesiredCapacity: !Ref NumberOfInstances
      MinSize: 1
      MaxSize: 10
      LaunchTemplate:
        LaunchTemplateId: !Ref K8sClusterLaunchTemplate
        Version: !GetAtt K8sClusterLaunchTemplate.LatestVersionNumber
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}
          PropagateAtLaunch: True
  K8sClusterLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:      
        ImageId: !Ref LatestAmiId
        InstanceType: !Ref InstanceType
        SecurityGroups:
          - !Ref SSHSecurityGroup # enable EC2 Instance Connect
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: 30
        UserData:
          Fn::Base64:
            !Sub |
              #!/usr/bin/env bash
              su ec2-user << EOF
                finally() {
                  /opt/aws/bin/cfn-signal -e 1 --stack ${AWS::StackName} --resource K8sClusterAutoScalingGroup --region ${AWS::Region}
                  exit 1
                }
                trap "finally" ERR
                set -eu

                cd
                export TLSPK_SA_USER_ID=${TLSPKSAUserId}
                export TLSPK_SA_USER_SECRET='$(sed 's/\$/_DOLLAR_/g' <<< '${TLSPKSAUserSecret}')'
                export TLSPK_CLUSTER_NAME=${AWS::StackName}-$(date +"%y%m%d%H%M%N" | cut -c-13) # date suffixed to ensure TLSPK doesn't consider it a dupe
                curl -fsSLO https://${EcosystemBucket}.s3.amazonaws.com/tlspk/v1/tlspk-helper.sh && chmod 700 tlspk-helper.sh

                ./tlspk-helper.sh install-dependencies       --auto-approve
                ./tlspk-helper.sh create-local-k8s-cluster   --auto-approve
                ./tlspk-helper.sh deploy-agent               --auto-approve
                ./tlspk-helper.sh install-operator           --auto-approve
                ./tlspk-helper.sh deploy-operator-components --auto-approve
                ./tlspk-helper.sh create-unsafe-tls-secrets  --auto-approve
                ./tlspk-helper.sh create-safe-tls-secrets    --auto-approve

                /opt/aws/bin/cfn-signal -e 0 --stack ${AWS::StackName} --resource K8sClusterAutoScalingGroup --region ${AWS::Region}
              EOF
